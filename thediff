diff --git a/Makefile b/Makefile
index b740a96..d25b2cd 100644
--- a/Makefile
+++ b/Makefile
@@ -2,6 +2,7 @@ PACKAGES=$(shell go list ./... | grep -v '/simulation')
 
 VERSION = 1.0.0
 COMMIT := $(shell git log -1 --format='%H')
+current_dir = $(shell pwd)
 
 # TODO: Update the ldflags with the app, client & server names
 ldflags = -X github.com/KiraCore/cosmos-sdk/version.Name=sekai \
@@ -31,3 +32,6 @@ lint:
 	@echo "--> Running linter"
 	@golangci-lint run
 	@go mod verify
+
+protoc:
+	 protoc -I "$(current_dir)/x/staking/types" -I "third_party/proto" types.proto --go_out .
diff --git a/app/app.go b/app/app.go
index fc105ab..2bf9151 100644
--- a/app/app.go
+++ b/app/app.go
@@ -2,15 +2,6 @@ package app
 
 import (
 	"encoding/json"
-	"github.com/KiraCore/cosmos-sdk/std"
-	"github.com/KiraCore/cosmos-sdk/x/auth/ante"
-	"github.com/KiraCore/cosmos-sdk/x/crisis"
-	"github.com/KiraCore/cosmos-sdk/x/gov"
-	port "github.com/KiraCore/cosmos-sdk/x/ibc/05-port"
-	transfer "github.com/KiraCore/cosmos-sdk/x/ibc/20-transfer"
-	"github.com/KiraCore/cosmos-sdk/x/upgrade"
-	"github.com/KiraCore/sekai/x/kiraHub"
-	constants "github.com/KiraCore/sekai/x/kiraHub/constants"
 	"io"
 	"os"
 
@@ -23,24 +14,34 @@ import (
 	"github.com/KiraCore/cosmos-sdk/codec"
 	cdctypes "github.com/KiraCore/cosmos-sdk/codec/types"
 	"github.com/KiraCore/cosmos-sdk/simapp"
+	"github.com/KiraCore/cosmos-sdk/std"
 	sdk "github.com/KiraCore/cosmos-sdk/types"
 	"github.com/KiraCore/cosmos-sdk/types/module"
 	"github.com/KiraCore/cosmos-sdk/version"
 	"github.com/KiraCore/cosmos-sdk/x/auth"
+	"github.com/KiraCore/cosmos-sdk/x/auth/ante"
 	"github.com/KiraCore/cosmos-sdk/x/bank"
 	"github.com/KiraCore/cosmos-sdk/x/capability"
+	"github.com/KiraCore/cosmos-sdk/x/crisis"
 	distr "github.com/KiraCore/cosmos-sdk/x/distribution"
 	"github.com/KiraCore/cosmos-sdk/x/evidence"
 	"github.com/KiraCore/cosmos-sdk/x/genutil"
+	"github.com/KiraCore/cosmos-sdk/x/gov"
 	"github.com/KiraCore/cosmos-sdk/x/ibc"
-	"github.com/KiraCore/cosmos-sdk/x/params"
-	"github.com/KiraCore/cosmos-sdk/x/slashing"
-	"github.com/KiraCore/cosmos-sdk/x/staking"
-
 	ibcclient "github.com/KiraCore/cosmos-sdk/x/ibc/02-client"
+	port "github.com/KiraCore/cosmos-sdk/x/ibc/05-port"
+	transfer "github.com/KiraCore/cosmos-sdk/x/ibc/20-transfer"
+	"github.com/KiraCore/cosmos-sdk/x/params"
 	paramsclient "github.com/KiraCore/cosmos-sdk/x/params/client"
 	paramproposal "github.com/KiraCore/cosmos-sdk/x/params/types/proposal"
+	"github.com/KiraCore/cosmos-sdk/x/slashing"
+	"github.com/KiraCore/cosmos-sdk/x/staking"
+	"github.com/KiraCore/cosmos-sdk/x/upgrade"
 	upgradeclient "github.com/KiraCore/cosmos-sdk/x/upgrade/client"
+
+	"github.com/KiraCore/sekai/x/kiraHub"
+	constants "github.com/KiraCore/sekai/x/kiraHub/constants"
+	customstaking "github.com/KiraCore/sekai/x/staking"
 )
 
 const appName = "Sekai"
@@ -79,11 +80,11 @@ var (
 
 	// module account permissions
 	maccPerms = map[string][]string{
-		auth.FeeCollectorName:     nil,
-		distr.ModuleName:          nil,
-		staking.BondedPoolName:    {auth.Burner, auth.Staking},
-		staking.NotBondedPoolName: {auth.Burner, auth.Staking},
-		gov.ModuleName:            {auth.Burner},
+		auth.FeeCollectorName:           nil,
+		distr.ModuleName:                nil,
+		staking.BondedPoolName:          {auth.Burner, auth.Staking},
+		staking.NotBondedPoolName:       {auth.Burner, auth.Staking},
+		gov.ModuleName:                  {auth.Burner},
 		transfer.GetModuleAccountName(): {auth.Minter, auth.Burner},
 	}
 
@@ -113,8 +114,8 @@ type SekaiApp struct {
 	invCheckPeriod uint
 
 	// keys to access the substores
-	keys  map[string]*sdk.KVStoreKey
-	tKeys map[string]*sdk.TransientStoreKey
+	keys    map[string]*sdk.KVStoreKey
+	tKeys   map[string]*sdk.TransientStoreKey
 	memKeys map[string]*sdk.MemoryStoreKey
 
 	// subspaces
@@ -186,7 +187,6 @@ func NewInitApp(
 		subspaces:      make(map[string]params.Subspace),
 	}
 
-
 	// Set specific supspaces
 	app.paramsKeeper = params.NewKeeper(appCodec, keys[params.StoreKey], tKeys[params.TStoreKey])
 	app.subspaces[auth.ModuleName] = app.paramsKeeper.Subspace(auth.DefaultParamspace)
@@ -284,7 +284,7 @@ func NewInitApp(
 		gov.NewAppModule(appCodec, app.govKeeper, app.accountKeeper, app.bankKeeper),
 		slashing.NewAppModule(appCodec, app.slashingKeeper, app.accountKeeper, app.bankKeeper, app.stakingKeeper),
 		distr.NewAppModule(appCodec, app.distrKeeper, app.accountKeeper, app.bankKeeper, app.stakingKeeper),
-		staking.NewAppModule(appCodec, app.stakingKeeper, app.accountKeeper, app.bankKeeper),
+		customstaking.NewAppModule(appCodec, app.stakingKeeper, app.accountKeeper, app.bankKeeper),
 		upgrade.NewAppModule(app.upgradeKeeper),
 		evidence.NewAppModule(app.evidenceKeeper),
 		ibc.NewAppModule(app.ibcKeeper),
diff --git a/third_party/proto/gogoproto/gogo.proto b/third_party/proto/gogoproto/gogo.proto
new file mode 100644
index 0000000..49e78f9
--- /dev/null
+++ b/third_party/proto/gogoproto/gogo.proto
@@ -0,0 +1,145 @@
+// Protocol Buffers for Go with Gadgets
+//
+// Copyright (c) 2013, The GoGo Authors. All rights reserved.
+// http://github.com/gogo/protobuf
+//
+// Redistribution and use in source and binary forms, with or without
+// modification, are permitted provided that the following conditions are
+// met:
+//
+//     * Redistributions of source code must retain the above copyright
+// notice, this list of conditions and the following disclaimer.
+//     * Redistributions in binary form must reproduce the above
+// copyright notice, this list of conditions and the following disclaimer
+// in the documentation and/or other materials provided with the
+// distribution.
+//
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+syntax = "proto2";
+package gogoproto;
+
+import "google/protobuf/descriptor.proto";
+
+option java_package = "com.google.protobuf";
+option java_outer_classname = "GoGoProtos";
+option go_package = "github.com/gogo/protobuf/gogoproto";
+
+extend google.protobuf.EnumOptions {
+	optional bool goproto_enum_prefix = 62001;
+	optional bool goproto_enum_stringer = 62021;
+	optional bool enum_stringer = 62022;
+	optional string enum_customname = 62023;
+	optional bool enumdecl = 62024;
+}
+
+extend google.protobuf.EnumValueOptions {
+	optional string enumvalue_customname = 66001;
+}
+
+extend google.protobuf.FileOptions {
+	optional bool goproto_getters_all = 63001;
+	optional bool goproto_enum_prefix_all = 63002;
+	optional bool goproto_stringer_all = 63003;
+	optional bool verbose_equal_all = 63004;
+	optional bool face_all = 63005;
+	optional bool gostring_all = 63006;
+	optional bool populate_all = 63007;
+	optional bool stringer_all = 63008;
+	optional bool onlyone_all = 63009;
+
+	optional bool equal_all = 63013;
+	optional bool description_all = 63014;
+	optional bool testgen_all = 63015;
+	optional bool benchgen_all = 63016;
+	optional bool marshaler_all = 63017;
+	optional bool unmarshaler_all = 63018;
+	optional bool stable_marshaler_all = 63019;
+
+	optional bool sizer_all = 63020;
+
+	optional bool goproto_enum_stringer_all = 63021;
+	optional bool enum_stringer_all = 63022;
+
+	optional bool unsafe_marshaler_all = 63023;
+	optional bool unsafe_unmarshaler_all = 63024;
+
+	optional bool goproto_extensions_map_all = 63025;
+	optional bool goproto_unrecognized_all = 63026;
+	optional bool gogoproto_import = 63027;
+	optional bool protosizer_all = 63028;
+	optional bool compare_all = 63029;
+    optional bool typedecl_all = 63030;
+    optional bool enumdecl_all = 63031;
+
+	optional bool goproto_registration = 63032;
+	optional bool messagename_all = 63033;
+
+	optional bool goproto_sizecache_all = 63034;
+	optional bool goproto_unkeyed_all = 63035;
+}
+
+extend google.protobuf.MessageOptions {
+	optional bool goproto_getters = 64001;
+	optional bool goproto_stringer = 64003;
+	optional bool verbose_equal = 64004;
+	optional bool face = 64005;
+	optional bool gostring = 64006;
+	optional bool populate = 64007;
+	optional bool stringer = 67008;
+	optional bool onlyone = 64009;
+
+	optional bool equal = 64013;
+	optional bool description = 64014;
+	optional bool testgen = 64015;
+	optional bool benchgen = 64016;
+	optional bool marshaler = 64017;
+	optional bool unmarshaler = 64018;
+	optional bool stable_marshaler = 64019;
+
+	optional bool sizer = 64020;
+
+	optional bool unsafe_marshaler = 64023;
+	optional bool unsafe_unmarshaler = 64024;
+
+	optional bool goproto_extensions_map = 64025;
+	optional bool goproto_unrecognized = 64026;
+
+	optional bool protosizer = 64028;
+	optional bool compare = 64029;
+
+	optional bool typedecl = 64030;
+
+	optional bool messagename = 64033;
+
+	optional bool goproto_sizecache = 64034;
+	optional bool goproto_unkeyed = 64035;
+}
+
+extend google.protobuf.FieldOptions {
+	optional bool nullable = 65001;
+	optional bool embed = 65002;
+	optional string customtype = 65003;
+	optional string customname = 65004;
+	optional string jsontag = 65005;
+	optional string moretags = 65006;
+	optional string casttype = 65007;
+	optional string castkey = 65008;
+	optional string castvalue = 65009;
+
+	optional bool stdtime = 65010;
+	optional bool stdduration = 65011;
+	optional bool wktpointer = 65012;
+
+	optional string castrepeated = 65013;
+}
diff --git a/x/staking/handler.go b/x/staking/handler.go
new file mode 100644
index 0000000..2ba3d74
--- /dev/null
+++ b/x/staking/handler.go
@@ -0,0 +1,17 @@
+package staking
+
+import (
+	sdk "github.com/KiraCore/cosmos-sdk/types"
+	"github.com/KiraCore/cosmos-sdk/x/staking"
+)
+
+func NewHandler(k staking.Keeper) sdk.Handler {
+	return func(ctx sdk.Context, msg sdk.Msg) (*sdk.Result, error) {
+		ctx = ctx.WithEventManager(sdk.NewEventManager())
+
+		switch msg := msg.(type) {
+		default:
+			return staking.NewHandler(k)(ctx, msg)
+		}
+	}
+}
diff --git a/x/staking/module.go b/x/staking/module.go
new file mode 100644
index 0000000..db25620
--- /dev/null
+++ b/x/staking/module.go
@@ -0,0 +1,39 @@
+package staking
+
+import (
+	"github.com/KiraCore/cosmos-sdk/codec"
+	sdk "github.com/KiraCore/cosmos-sdk/types"
+	"github.com/KiraCore/cosmos-sdk/types/module"
+	"github.com/KiraCore/cosmos-sdk/x/auth"
+	"github.com/KiraCore/cosmos-sdk/x/staking"
+	"github.com/KiraCore/cosmos-sdk/x/staking/types"
+)
+
+var (
+	_ module.AppModule = AppModule{}
+)
+
+// AppModule extends the cosmos SDK staking.
+type AppModule struct {
+	staking.AppModule
+
+	stakingKeeper staking.Keeper
+}
+
+// NewHandler returns an sdk.Handler for the staking module.
+func (am AppModule) NewHandler() sdk.Handler {
+	return NewHandler(am.stakingKeeper)
+}
+
+// NewAppModule returns a new Custom Staking module.
+func NewAppModule(
+	cdc codec.Marshaler,
+	keeper staking.Keeper,
+	ak auth.AccountKeeper,
+	bk types.BankKeeper,
+) AppModule {
+	return AppModule{
+		AppModule:     staking.NewAppModule(cdc, keeper, ak, bk),
+		stakingKeeper: keeper,
+	}
+}
diff --git a/x/staking/types/types.pb.go b/x/staking/types/types.pb.go
new file mode 100644
index 0000000..920a63c
--- /dev/null
+++ b/x/staking/types/types.pb.go
@@ -0,0 +1,222 @@
+// Code generated by protoc-gen-go. DO NOT EDIT.
+// versions:
+// 	protoc-gen-go v1.25.0-devel
+// 	protoc        v3.11.2
+// source: types.proto
+
+package types
+
+import (
+	_ "github.com/gogo/protobuf/gogoproto"
+	proto "github.com/golang/protobuf/proto"
+	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
+	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
+	reflect "reflect"
+	sync "sync"
+)
+
+const (
+	// Verify that this generated code is sufficiently up-to-date.
+	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
+	// Verify that runtime/protoimpl is sufficiently up-to-date.
+	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
+)
+
+// This is a compile-time assertion that a sufficiently up-to-date version
+// of the legacy proto package is being used.
+const _ = proto.ProtoPackageIsVersion4
+
+// MsgClaimValidatorSeat
+type MsgClaimValidatorSeat struct {
+	state         protoimpl.MessageState
+	sizeCache     protoimpl.SizeCache
+	unknownFields protoimpl.UnknownFields
+
+	Moniker   string `protobuf:"bytes,1,opt,name=moniker,proto3" json:"moniker,omitempty"`
+	Website   string `protobuf:"bytes,2,opt,name=website,proto3" json:"website,omitempty"`
+	Social    string `protobuf:"bytes,3,opt,name=social,proto3" json:"social,omitempty"`
+	Identity  string `protobuf:"bytes,4,opt,name=identity,proto3" json:"identity,omitempty"`
+	Comission string `protobuf:"bytes,5,opt,name=comission,proto3" json:"comission,omitempty"`
+	Valkey    []byte `protobuf:"bytes,6,opt,name=valkey,proto3" json:"valkey,omitempty"`
+	Pubkey    []byte `protobuf:"bytes,7,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
+}
+
+func (x *MsgClaimValidatorSeat) Reset() {
+	*x = MsgClaimValidatorSeat{}
+	if protoimpl.UnsafeEnabled {
+		mi := &file_types_proto_msgTypes[0]
+		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
+		ms.StoreMessageInfo(mi)
+	}
+}
+
+func (x *MsgClaimValidatorSeat) String() string {
+	return protoimpl.X.MessageStringOf(x)
+}
+
+func (*MsgClaimValidatorSeat) ProtoMessage() {}
+
+func (x *MsgClaimValidatorSeat) ProtoReflect() protoreflect.Message {
+	mi := &file_types_proto_msgTypes[0]
+	if protoimpl.UnsafeEnabled && x != nil {
+		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
+		if ms.LoadMessageInfo() == nil {
+			ms.StoreMessageInfo(mi)
+		}
+		return ms
+	}
+	return mi.MessageOf(x)
+}
+
+// Deprecated: Use MsgClaimValidatorSeat.ProtoReflect.Descriptor instead.
+func (*MsgClaimValidatorSeat) Descriptor() ([]byte, []int) {
+	return file_types_proto_rawDescGZIP(), []int{0}
+}
+
+func (x *MsgClaimValidatorSeat) GetMoniker() string {
+	if x != nil {
+		return x.Moniker
+	}
+	return ""
+}
+
+func (x *MsgClaimValidatorSeat) GetWebsite() string {
+	if x != nil {
+		return x.Website
+	}
+	return ""
+}
+
+func (x *MsgClaimValidatorSeat) GetSocial() string {
+	if x != nil {
+		return x.Social
+	}
+	return ""
+}
+
+func (x *MsgClaimValidatorSeat) GetIdentity() string {
+	if x != nil {
+		return x.Identity
+	}
+	return ""
+}
+
+func (x *MsgClaimValidatorSeat) GetComission() string {
+	if x != nil {
+		return x.Comission
+	}
+	return ""
+}
+
+func (x *MsgClaimValidatorSeat) GetValkey() []byte {
+	if x != nil {
+		return x.Valkey
+	}
+	return nil
+}
+
+func (x *MsgClaimValidatorSeat) GetPubkey() []byte {
+	if x != nil {
+		return x.Pubkey
+	}
+	return nil
+}
+
+var File_types_proto protoreflect.FileDescriptor
+
+var file_types_proto_rawDesc = []byte{
+	0x0a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x73,
+	0x65, 0x6b, 0x61, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x1a, 0x14, 0x67, 0x6f,
+	0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
+	0x74, 0x6f, 0x22, 0x93, 0x03, 0x0a, 0x15, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x56,
+	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x61, 0x74, 0x12, 0x1e, 0x0a, 0x07,
+	0x6d, 0x6f, 0x6e, 0x69, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xc8,
+	0xde, 0x1f, 0x00, 0x52, 0x07, 0x6d, 0x6f, 0x6e, 0x69, 0x6b, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x07,
+	0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xc8,
+	0xde, 0x1f, 0x00, 0x52, 0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x06,
+	0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xc8, 0xde,
+	0x1f, 0x00, 0x52, 0x06, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x08, 0x69, 0x64,
+	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xc8, 0xde,
+	0x1f, 0x00, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x09,
+	0x63, 0x6f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
+	0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
+	0x12, 0x67, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c,
+	0x42, 0x4f, 0xfa, 0xde, 0x1f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
+	0x2f, 0x4b, 0x69, 0x72, 0x61, 0x43, 0x6f, 0x72, 0x65, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
+	0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x41, 0x64,
+	0x64, 0x72, 0x65, 0x73, 0x73, 0xf2, 0xde, 0x1f, 0x18, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x76,
+	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
+	0x22, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x6b, 0x65, 0x79, 0x12, 0x67, 0x0a, 0x06, 0x70, 0x75, 0x62,
+	0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x4f, 0xfa, 0xde, 0x1f, 0x2f, 0x67,
+	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4b, 0x69, 0x72, 0x61, 0x43, 0x6f,
+	0x72, 0x65, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79,
+	0x70, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0xf2, 0xde,
+	0x1f, 0x18, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f,
+	0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6b,
+	0x65, 0x79, 0x3a, 0x04, 0xe8, 0xa0, 0x1f, 0x01, 0x42, 0x12, 0x5a, 0x10, 0x2f, 0x78, 0x2f, 0x73,
+	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72,
+	0x6f, 0x74, 0x6f, 0x33,
+}
+
+var (
+	file_types_proto_rawDescOnce sync.Once
+	file_types_proto_rawDescData = file_types_proto_rawDesc
+)
+
+func file_types_proto_rawDescGZIP() []byte {
+	file_types_proto_rawDescOnce.Do(func() {
+		file_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_types_proto_rawDescData)
+	})
+	return file_types_proto_rawDescData
+}
+
+var file_types_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
+var file_types_proto_goTypes = []interface{}{
+	(*MsgClaimValidatorSeat)(nil), // 0: sekai.staking.MsgClaimValidatorSeat
+}
+var file_types_proto_depIdxs = []int32{
+	0, // [0:0] is the sub-list for method output_type
+	0, // [0:0] is the sub-list for method input_type
+	0, // [0:0] is the sub-list for extension type_name
+	0, // [0:0] is the sub-list for extension extendee
+	0, // [0:0] is the sub-list for field type_name
+}
+
+func init() { file_types_proto_init() }
+func file_types_proto_init() {
+	if File_types_proto != nil {
+		return
+	}
+	if !protoimpl.UnsafeEnabled {
+		file_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
+			switch v := v.(*MsgClaimValidatorSeat); i {
+			case 0:
+				return &v.state
+			case 1:
+				return &v.sizeCache
+			case 2:
+				return &v.unknownFields
+			default:
+				return nil
+			}
+		}
+	}
+	type x struct{}
+	out := protoimpl.TypeBuilder{
+		File: protoimpl.DescBuilder{
+			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
+			RawDescriptor: file_types_proto_rawDesc,
+			NumEnums:      0,
+			NumMessages:   1,
+			NumExtensions: 0,
+			NumServices:   0,
+		},
+		GoTypes:           file_types_proto_goTypes,
+		DependencyIndexes: file_types_proto_depIdxs,
+		MessageInfos:      file_types_proto_msgTypes,
+	}.Build()
+	File_types_proto = out.File
+	file_types_proto_rawDesc = nil
+	file_types_proto_goTypes = nil
+	file_types_proto_depIdxs = nil
+}
diff --git a/x/staking/types/types.proto b/x/staking/types/types.proto
new file mode 100644
index 0000000..8283979
--- /dev/null
+++ b/x/staking/types/types.proto
@@ -0,0 +1,28 @@
+syntax = "proto3";
+package sekai.staking;
+
+import "gogoproto/gogo.proto";
+
+option go_package = "/x/staking/types";
+
+// MsgClaimValidatorSeat
+message MsgClaimValidatorSeat {
+  option (gogoproto.equal) = true;
+
+
+  string moniker         = 1 [(gogoproto.nullable) = false];
+  string website         = 2 [(gogoproto.nullable) = false];
+  string social          = 3 [(gogoproto.nullable) = false];
+  string identity        = 4 [(gogoproto.nullable) = false];
+  string comission       = 5 [(gogoproto.nullable) = false];
+
+  bytes  valkey = 6 [
+    (gogoproto.casttype) = "github.com/KiraCore/cosmos-sdk/types.ValAddress",
+    (gogoproto.moretags) = "yaml:\"validator_address\""
+  ];
+
+  bytes  pubkey = 7 [
+    (gogoproto.casttype) = "github.com/KiraCore/cosmos-sdk/types.AccAddress",
+    (gogoproto.moretags) = "yaml:\"delegator_address\""
+  ];
+}
